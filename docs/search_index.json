[["index.html", "NFI technical module 9: Practice Lesson 1: Overview of the preliminary data Cover page", " NFI technical module 9: Practice Lesson 1: Overview of the preliminary data Handbook with solutions - Version 1.0 - October 2021 Cover page DRAFT         NFI technical module 9: Practice Lesson 1: Overview of the preliminary data - Handbook with solutions   ADD Authors FAO, Göttingen   ADD Recommended citation Authors, Interactive training modules on National Forest Inventory data analysis - handbook with solutions, Food and Agricultural Organization of the United Nations, Rome.   ADD Disclaimer   ADD license Recommendation: CC NC SA 4 for the book, MIT for the code, Underlying data © FAO, 2021.   ADD Photo credit "],["introduction.html", "Introduction", " Introduction DRAFT Welcome to the first lesson of the NFI technical module 9: Practice. This interactive module is designed to complement the NFI training modules [LINK] with practical hands-on exercises on a fictional island that just emerged in the middle of the Atlantic Ocean: Louland. Although this land is not an official country, we will use the acronym NFI when referring to its forest inventory as the method and formulas applied here are valid for nationwide forest inventories. In this first lesson: Overview of the preliminary data, we will discover the land cover of Louland and we will recalculate the average Aboveground Biomass (AGB) of a small inventory carried out by the first exploration crew in one forest stand. The objectives of this lesson are: familiarize yourself with how the interactive lessons of the NFI technical module 9 work, familiarize yourself with Louland, our fictional land to practice national Forest Inventory sampling design and data analysis, Calculate an average AGB estimate for one forest stand, Calculate the area of different land covers, based on shapefile spatial data. Lets get started! "],["newland.html", "1 A new land has emerged", " 1 A new land has emerged DRAFT An island previously unknown to humankind has just been discovered and you are part of a team of scientists commissioned to inventory its forest resources, mainly its carbon stock. In a future version of this interactive training module, you will be able to choose different land profiles with different (1) forest categories, (2) ratio of ocean covering the 90 x 90 km square frame in which the new land is created, (3) inclusion or not of mangrove forests and even (4) the maximum altitude of Louland (it will have an impact on inaccessible plots)! For now, Louland forests are divided into 4 categories: Evergreen forest, Mixed-Deciduous forest, Deciduous forest, Other Woodland, Other Non-forest land plus Mangrove Forest and all the island is considered accessible. Here is what Louland looks like. Your browser does not support the video tag. The remote sensing team has developed land cover and topographic maps based on 30 m resolution remote sensing images and a first exploratiosn crew measured a few foret plots. Based on their observations, we will be able to have a quick overview of Louland. This data is call auxiliary data, it is not NFI data per se, but useful information to help designing and implementing an NFI. In the next section, we will have a quick look at both the exploration crews forest inventory data, loaded in R as objects with the exfi prefix, and we will use the land cover maps to calculate the area of the main land cover types.   "],["results-of-a-small-scale-preliminary-forest-inventory.html", "2 Results of a small scale preliminary forest inventory 2.1 Overview 2.2 Recalculate the mean AGB", " 2 Results of a small scale preliminary forest inventory DRAFT 2.1 Overview First, lets have a look at the results of 10 forest plots measured by the exploration crew. The data is stored in the object exfi_agb. By running the object name in the console we will see the results: exfi_agb # A tibble: 1 x 8 n_plot n_tree mean_ba sd_ba mean_agb sd_agb ci ci_perc &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 10 302. 27.4 24.8 261. 184. 114. 44   Since we are using functions from the tidyverse collection of R packages, data tables in these interactive lessons are tibbles. They are simple rectangular tables (each column has the same number of rows) plus when running their names in the console, we get the number of rows and columns, the column names with the type of data and the first 10 values for each column.   The table (or tibble) exfi_agb contains the number of plots n_plot, the mean and standard deviation for aboveground biomass and basal area: mean_agb and sd_agb in ton/ha, mean_ba and sd_ba in m2/ha. ci and ci_perc represent the confidence interval around the mean AGB in ton/ha and percentage of the mean respectively. The 10 plots come from a random sample in one of the Evergreen Forest of Louland. The crew also shared the plot level aboveground biomass in the table name exfi_pagb.   Whenever you see Your turn!, followed by a small console windows, these are actual R consoles. You can run R code in these consoles and you will be presented with either pre-filled code sequences with holes for you to complete or an empty console. Follow the instructions and try to complete or create the code necessary to get the table, value or figure requested. The lesson continue after the exercise is completed and the correct code submitted. The interactive lessons are designed on a try and error model. The code is first showcased then pre-filled code with holes for you to complete in order to become familiar with the commands. Finally after a few practice exercises the last console for a group of commands will be empty.   Your turn! Run the table name exfi_pagb in the console below to see the table basic information. ## Console ## exfi_pagb # A tibble: 10 x 4 plot_id count_tree plot_ba plot_agb &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 ev-ipu1 830 26.6 190. 2 ev-jcc2 128 28.9 377. 3 ev-mcp4 72 11.3 182. 4 ev-rxz2 64 17.6 116. 5 ev-rza4 272 30.3 244. 6 ev-vhs3 56 5.23 52.6 7 ev-vxo4 136 25.8 376. 8 ev-xaj1 128 17.9 255. 9 ev-ygb6 362 16.7 127. 10 ev-yyz6 970 94.2 688. The table exfi_pagb contains for each plot, its ID plot_id, number of trees per hectare count_tree, basal area plot_ba in m2/ha and aboveground biomass plot_agb in ton/ha.   2.2 Recalculate the mean AGB Given that the crew chose the plot location randomly, we can use simple aggregating functions to re-calculate the forest mean aboveground biomass and confirm their calculation. We will use a mix of base R and tidyverse functions, in particular summarise(). This function is very handy to aggregate numerical variables in different columns of our plot table and can even be used in combination to group_by() to summarize numerical variables based on category variables of the same table (more on that later, with the full NFI data). Lets see for example how to calculate the mean basal area of the forest with its standard deviation, and save the results in a table exfi_ba. After creating the table, we run the table name in the console to display its content. exfi_ba &lt;- exfi_pagb %&gt;% summarise( mean_ba = mean(plot_ba), sd_ba = sd(plot_ba) ) exfi_ba # A tibble: 1 x 2 mean_ba sd_ba &lt;dbl&gt; &lt;dbl&gt; 1 27.4 24.8   Your turn! Create a table exfi_agb2 wiath the columns mean_agb nd sd_agb and display the results. ## Console exfi_agb2 &lt;- exfi_pagb %&gt;% summarise( mean_agb = mean(___), sd_agb = sd(___) ) exfi_agb2 exfi_agb2 &lt;- exfi_pagb %&gt;% summarise( mean_agb = mean(plot_agb), sd_agb = sd(plot_agb) ) exfi_agb2 # A tibble: 1 x 2 mean_agb sd_agb &lt;dbl&gt; &lt;dbl&gt; 1 261. 184. We have successfully found back the same values for AGB: 260.89 ton/ha on average with a standard deviation of 183.6. In the next section we will have an overview of the spatial data on Loulands land cover classes.   "],["land-cover-types-and-areas.html", "3 land cover types and areas 3.1 Spatial objects 3.2 Land cover areas", " 3 land cover types and areas DRAFT 3.1 Spatial objects We can use the land cover shapefile provided to us by the remote sensing analysts to view the extent of the different land covers and calculate the area of the forest cover. The shapefile is loaded in the R environment under the name sf_lc with the package sf. It contains both the attribute table, the geometries and the coordinate reference system of Loulands land cover. Running the object by its name in the console displays its summary information. sf_lc Simple feature collection with 543 features and 4 fields Geometry type: POLYGON Dimension: XY Bounding box: xmin: 560363 ymin: 9919901 xmax: 650363 ymax: 10009900 Projected CRS: WGS 84 / UTM zone 27S First 10 features: id lc_id lc lc_name geometry 1 1 5 EV Evergreen POLYGON ((566193.1 10009779... 2 2 4 MD Mixed Deciduous POLYGON ((566803.7 10009814... 3 3 3 DD Deciduous POLYGON ((570572.2 10009847... 4 4 3 DD Deciduous POLYGON ((572188.9 10009853... 5 5 2 WL Other woodland POLYGON ((572457.7 10009848... 6 6 1 NF Non-forest POLYGON ((619163.6 10009844... 7 7 3 DD Deciduous POLYGON ((561303.3 10009842... 8 8 1 NF Non-forest POLYGON ((562396.2 10009759... 9 9 5 EV Evergreen POLYGON ((616198.6 10009770... 10 10 5 EV Evergreen POLYGON ((567339.4 10009810... This summary view regroups the Coordinate Reference System (CRS), the type of geometry (polygon), the number of polygons (features) and fields and the detailed information on the first 10 polygons in the whole shapefile. The four fields represent the polygon IDs (id), the land cover IDs (lc_id), codes (lc) and names (lc_name). To isolate the list of different land covers we first need to convert the spatial data into a tibble with as_tibble(), then select only the columns related to land cover information with select(). We can use the distinct() function to keep only unique values across the newly formed data table. Finally, since the land cover IDs are numerical we can sort the resulting table by increasing value of lc_id with the function arrange(). sf_lc %&gt;% as_tibble() %&gt;% select(lc_id, lc, lc_name) %&gt;% distinct() %&gt;% arrange(lc_id) # A tibble: 7 x 3 lc_id lc lc_name &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; 1 0 WA Water 2 1 NF Non-forest 3 2 WL Other woodland 4 3 DD Deciduous 5 4 MD Mixed Deciduous 6 5 EV Evergreen 7 6 MG Mangrove With the tidyverse packages we have the pipe operator %&gt;%. This operator allows us to apply functions one after the other in a sequence and without needing to save each intermediate step in a new object. Step-by-step the above code could be written: t1 &lt;- as_tibble(sf_lc) t2 &lt;- select(.data = t1, lc_id, lc, lc_name) t3 &lt;- distinct(.data = t2) t4 &lt;- arrange(.data = t3, lc_id) Notice that with the pipe operator %&gt;% we can place the command s one after the other and the resulting table of each function is silently passed to the next function. We dont need to repeat the input .data =.   Lets set a few naming conventions. All forest inventory related tables are stored in R objects with names related to their contents. For example the NFI plot and tree data are stored in tables plot and tree, respectively. Using plot as a table name is not very good practice in R as plot() is the base R function for plotting data. But we keep it nonetheless because it is an informative name. The NFI tables in this tutorial are: plot, tree and species_list. The prefix exfi_ from the tables shown in the oprevious section was added for the data from the first exploration crew forest inventory. Similarly all spatial data are handled mostly with the sf package, and the prefix sf_ was used as a naming convention. The spatial objects available for this tutorial are as follows: sf_admin, sf_lc and sf_topo, respectively the administrative boundaries, land cover, and topography of Louland.   3.2 Land cover areas sf objects behave similarly to standard tibbles, making it easy to apply tidyverse functions while keeping the spatial information or to convert them to tibbles with as_tibble(). The sf package also contains the st_area() function that we are going to use to calculate the areas of the land covers. In the following sequence we combine the function mutate() used to create or modify columns to our target table with st_area(). Since st_area() takes the whole spatial object as input, we could use st_area(sf_lc) or st_area(.), which is the standard way to call the current state of a tibble inside a sequence of functions linked with pipes. area_lc &lt;- sf_lc %&gt;% mutate( area_m2 = st_area(.), area_ha = units::set_units(area_m2, value = ha) ) %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(area_ha = sum(area_ha)) area_lc # A tibble: 7 x 2 lc area_ha &lt;fct&gt; [ha] 1 WA 3883. 2 NF 156830. 3 WL 152703. 4 DD 63978. 5 MD 186385. 6 EV 88912. 7 MG 10362. Your turn! Calculate the total area of land in Louland, all land cover classes together, and save it in an object area_tot. Hint: group_by() is not necessary anymore ## Console area_tot &lt;- sf_lc %&gt;% mutate( area_m2 = st_area(___), area_ha = units::set_units(___, value = ha) ) %&gt;% as_tibble() %&gt;% summarise(___ = sum(___)) area_tot area_tot &lt;- sf_lc %&gt;% mutate( area_m2 = st_area(.), area_ha = units::set_units(area_m2, value = ha) ) %&gt;% as_tibble() %&gt;% summarise(area_ha = sum(area_ha)) area_tot # A tibble: 1 x 1 area_ha [ha] 1 663054. The total area of Louland is 663054 ha.   "],["conclusion.html", "Conclusion", " Conclusion DRAFT This is the end of the lesson 1. In the next lessons, we use these preliminary data to design different sampling frames and analyze tree and plot data. We will use this data to estimate several NFI main variables, such as carbon, biodiversity or production indicators. Before moving on with the sampling designs and other lessons in this practice module, here is a dynamic view of Louland and the first 10 forest inventory plots. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
